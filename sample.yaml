---
-
  gather_facts: false
  hosts: all
  vars:
    artifacts_path: '/eps/installers'
    artifactory_path: 'https://oneartifactory.verizon.com/artifactory/EJAV_EPS'
    artifactory_user: 'SVC-VZW-EJAV-DevOps'
    artifactory_pass: 'AP4Ks78sX2qGNYm1EkSsNDFTiwayB7UEVF1JTXtc6jUXiejYg'
    application_user: 'eps'
  tasks:
    -
      become: true
      become_method: pbrun
      become_user: eps
      get_url:
        dest: "/eps/IBM/ucd-agent/conf"
        mode: 0644
        url: "{{artifactory_path}}/urbancode/agent.keystore"
        url_password: "{{artifactory_pass}}"
        url_username: "{{artifactory_user}}"
      name: "Download agent.keystore file."
    -
      become: true
      become_method: pbrun
      become_user: eps
      get_url:
        dest: "/eps/IBM/ucd-agent/conf"
        mode: 0644
        url: "{{artifactory_path}}/urbancode/encryption.keystore"
        url_password: "{{artifactory_pass}}"
        url_username: "{{artifactory_user}}"
      name: "Download encryption.keystore file. "
    -
      become: true
      become_method: pbrun
      become_user: eps
      get_url:
        dest: "{{artifacts_path}}"
        mode: 0644
        url: "{{artifactory_path}}/urbancode/installed.properties"
        url_password: "{{artifactory_pass}}"
        url_username: "{{artifactory_user}}"
      name: "Download required software for EPS instance"
    -
      become: true
      become_method: pbrun
      become_user: eps
      command: cp {{artifacts_path}}/installed.properties /eps/IBM/ucd-agent/conf/agent/
      name: "Copy installed.properties file"
    -
      become: true
      become_method: pbrun
      become_user: root
      file:
        src: /eps/IBM/ucd-agent/bin/init/agent
        dest: /etc/init.d/ucd-agent
        state: link
        force: yes
      name: "creationg link to urban code agent in init.d"
    - 
      become: true
      become_method: pbrun
      become_user: root
      file:
        src: /etc/init.d/ucd-agent
        dest: /etc/rc3.d/S80ucd-agent
        state: link
        force: yes
      name: "creationg link to urban code agent in rc2.d"        
    -
      become: true
      become_method: pbrun
      become_user: eps
      replace:
        dest    : /eps/IBM/ucd-agent/bin/init/agent
        replace : 'AGENT_USER={{ application_user }}'
        regexp  : 'AGENT_USER=$'
      name: "Update agent user to eps"
    -
      become: true
      become_method: pbrun
      become_user: eps
      replace:
        dest    : /eps/IBM/ucd-agent/bin/init/agent
        replace : 'AGENT_GROUP={{ application_user }}'
        regexp  : 'AGENT_GROUP=$'
      name: "Update agent group to eps"
    -
      become: true
      become_method: pbrun
      become_user: eps
      name: Check if smart folder exists
      stat: path=/eps/wlp/usr/servers/smart
      register: smart
    -
      become: true
      become_method: pbrun
      become_user: eps
      name: remove smart folder if it exists
      file:
        path: /eps/wlp/usr/servers/smart
        state: absent
      when: smart.stat.exists
    -
      become: true
      become_method: pbrun
      become_user: eps
      get_url:
        dest: "{{artifacts_path}}"
        mode: 0755
        url: "{{artifactory_path}}/eps_artifacts.zip"
        url_password: "{{artifactory_pass}}"
        url_username: "{{artifactory_user}}"
      name: "Download required softwares for EPS instance"
    -
      become: true
      become_method: pbrun
      become_user: eps
      unarchive:
        mode: 0755
        src: "{{artifacts_path}}/eps_artifacts.zip"
        dest: "{{artifacts_path}}/"
        remote_src: True
      name: "Unzip softwares package"
    -
      become: true
      become_method: pbrun
      become_user: eps
      command: cp -r {{artifacts_path}}/eps_artifacts/EPS_TEMPLATES/.  /eps/wlp/usr/servers
      name: "Create eps servers"      
    -
      become: true
      become_method: pbrun
      become_user: eps
      name: Check {{component}}.donotstart folder exists
      stat: path=/eps/wlp/usr/servers/{{component}}.donotstart
      register: p
    -
      become: true
      become_method: pbrun
      become_user: eps
      name: rename folder {{component}}.donotstart to {{component}}
      command: mv /eps/wlp/usr/servers/{{component}}.donotstart /eps/wlp/usr/servers/{{component}}
      when: p.stat.exists
    -
      become: true
      become_method: pbrun
      become_user: eps
      copy:
        src : ../scripts/uc_environment_properties.json
        dest : "{{artifacts_path}}"
      name: copy uc_environment_properties.json from stash to ec2
    -
      become: true
      become_method: pbrun
      become_user: eps
      copy:
        src : ../scripts/create_env_deploy_code.py
        dest : "{{artifacts_path}}"
      name: copy create_env_deploy_code.py from stash to ec2
    -
      become: true
      become_method: pbrun
      become_user: eps
      copy:
        src : ../scripts/set_ec2_deleteontermination.py
        dest : "{{artifacts_path}}"
      name: copy set_ec2_deleteontermination.py from stash to ec2 
    -
      name: Run set_ec2_deleteontermination Setup
      become: true
      become_user: eps
      become_method: pbrun
      shell: "python {{artifacts_path}}/set_ec2_deleteontermination.py"